{
  "openapi": "3.0.0",
  "info": {
    "title": "A/B Splitter API + Safe HTML Tester (embedded)",
    "version": "1.0.0",
    "description": "Sanitized OpenAPI spec with a non-executing HTML tester embedded as an example. Load this locally in Swagger UI, open GET /tools/html-tester, copy the HTML from the example, save to a file, and run it only in an isolated VM."
  },
  "servers": [
    {
      "url": "https://ab-splitter.xsolla.com",
      "description": "Target API server (for actual API calls)."
    }
  ],
  "paths": {
    "/tools/html-tester": {
      "get": {
        "summary": "Get HTML tester (as text example)",
        "description": "Returns the full HTML tester page as a string inside the response example. **This is safe**: Swagger UI will show the HTML as code/text. Copy it out and run only in an isolated environment if you wish to execute it.",
        "responses": {
          "200": {
            "description": "HTML tester page (string) in example",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filename": { "type": "string", "example": "xss-tester.html" },
                    "html": { "type": "string", "description": "The HTML content as a string (escaped in JSON)" }
                  }
                },
                "examples": {
                  "safeHtmlTester": {
                    "summary": "HTML tester (copy-save-run in isolated VM)",
                    "value": {
                      "filename": "xss-tester.html",
                      "html": "<!doctype html>\\n<html lang=\\\"en\\\">\\n<head>\\n<meta charset=\\\"utf-8\\\" />\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\" />\\n<title>XSS Payload Tester (Safe harness)</title>\\n<style>\\n  body { font-family: system-ui, -apple-system, Roboto, \\\"Segoe UI\\\", Arial; margin: 0; background: #f6f8fa; color:#111; }\\n  header { background:#0b5fff; color:white; padding:14px 18px; }\\n  main { padding:18px; display:flex; gap:18px; }\\n  #left { width: 50%; max-height:80vh; overflow:auto; background: #fff; border:1px solid #ddd; padding:12px; border-radius:6px; }\\n  #right { width:50%; display:flex; flex-direction:column; gap:12px; }\\n  .payload-row { padding:8px; border-bottom:1px solid #eee; display:flex; gap:8px; align-items:flex-start; }\\n  .payload-text { white-space:pre-wrap; font-family: monospace; background:#fafafa; padding:6px; border-radius:4px; border:1px solid #eee; flex:1; overflow:auto; max-height:120px;}\\n  .btn { padding:6px 10px; border-radius:6px; border:1px solid #bbb; background:#fff; cursor:pointer; }\\n  .btn-primary { background:#0b5fff; color:#fff; border-color:#0a4bd1; }\\n  .btn-danger { background:#ff4d4f; color:#fff; border-color:#c42b2b; }\\n  footer { padding:12px; font-size:13px; color:#555; }\\n  .controls { display:flex; gap:8px; margin-bottom:8px; }\\n  input[type=\\\"search\\\"] { flex:1; padding:6px 8px; border-radius:6px; border:1px solid #ccc; }\\n  #iframeHost { border:1px dashed #bbb; border-radius:6px; height:420px; background:white; overflow:hidden; }\\n  .meta { font-size:13px; color:#666; }\\n</style>\\n</head>\\n<body>\\n<header>\\n  <strong>XSS Payload Tester — Safe Local Harness</strong>\\n</header>\\n\\n<main>\\n  <section id=\\\"left\\\">\\n    <div style=\\\"display:flex; gap:8px; margin-bottom:8px;\\\">\\n      <input id=\\\"searchBox\\\" type=\\\"search\\\" placeholder=\\\"Search payloads (substring)...\\\" />\\n      <button id=\\\"refreshBtn\\\" class=\\\"btn\\\">Reload</button>\\n      <button id=\\\"showAllBtn\\\" class=\\\"btn\\\">Show All</button>\\n    </div>\\n\\n    <div id=\\\"payloadList\\\" aria-live=\\\"polite\\\">\\n      Loading payloads.json...\\n    </div>\\n  </section>\\n\\n  <section id=\\\"right\\\">\\n    <div>\\n      <div class=\\\"meta\\\"><strong>Instructions (READ CAREFULLY)</strong></div>\\n      <ol>\\n        <li>Run this only <strong>locally in an isolated VM/container</strong>. Network should be disabled or proxied through an intercepting proxy if you want to observe requests.</li>\\n        <li>Payloads are stored in <code>payloads.json</code> — this page only loads them and displays them as text.</li>\\n        <li>Click <em>Run</em> to execute a single payload inside a sandboxed iframe with a strict Content-Security-Policy that blocks network and external resources.</li>\\n        <li>Do <strong>not</strong> upload this file to any production or public service.</li>\\n      </ol>\\n    </div>\\n\\n    <div>\\n      <div class=\\\"meta\\\"><strong>Sandbox iframe (execution target)</strong></div>\\n      <div id=\\\"iframeHost\\\">\\n        <iframe id=\\\"sandbox\\\" style=\\\"width:100%;height:100%;border:0;\\\" sandbox=\\\"allow-scripts\\\"></iframe>\\n      </div>\\n      <div style=\\\"margin-top:8px;\\\">\\n        <button id=\\\"clearIframe\\\" class=\\\"btn\\\">Clear iframe</button>\\n        <button id=\\\"openInNew\\\" class=\\\"btn\\\">Open last payload in new window (unsafe)</button>\\n      </div>\\n      <div class=\\\"meta\\\" style=\\\"margin-top:8px;\\\">Note: sandboxed iframe uses <code>Content-Security-Policy</code> that blocks network (<code>connect-src 'none'</code>, <code>img-src 'none'</code>) and does not use allow-same-origin. Scripts can run but cannot exfiltrate to the network.</div>\\n    </div>\\n\\n    <div>\\n      <div class=\\\"meta\\\"><strong>Last executed payload (for quick copy)</strong></div>\\n      <textarea id=\\\"lastPayload\\\" rows=\\\"6\\\" style=\\\"width:100%;font-family:monospace;\\\" readonly></textarea>\\n      <div style=\\\"margin-top:8px;\\\">\\n        <button id=\\\"copyLast\\\" class=\\\"btn\\\">Copy last payload</button>\\n      </div>\\n    </div>\\n  </section>\\n</main>\\n\\n<footer>\\n  <strong>Safety:</strong> This harness is designed to reduce accidental exfiltration, but it is not bulletproof. Run in an isolated environment. The author of this harness is not responsible for misuse.\\n</footer>\\n\\n<script>\\n(async function(){\\n  // Load payloads.json from same folder\\n  async function loadPayloads(){\\n    try{\\n      const res = await fetch('payloads.json', {cache:'no-store'});\\n      if(!res.ok) throw new Error('payloads.json not found or not accessible. HTTP ' + res.status);\\n      const obj = await res.json();\\n      if(!Array.isArray(obj.payloads)) throw new Error('Invalid payloads.json format: expected { \\\"payloads\\\": [ ... ] }');\\n      return obj.payloads;\\n    }catch(err){\\n      console.error(err);\\n      return null;\\n    }\\n  }\\n\\n  // Helper: escape text for display (not for execution)\\n  function escapeHtml(s){\\n    return String(s)\\n      .replace(/&/g, '&amp;')\\n      .replace(/</g, '&lt;')\\n      .replace(/>/g, '&gt;')\\n      .replace(/\\\"/g, '&quot;')\\n      .replace(/'/g, '&#39;');\\n  }\\n\\n  // Render list\\n  const payloadListEl = document.getElementById('payloadList');\\n  const searchBox = document.getElementById('searchBox');\\n  const refreshBtn = document.getElementById('refreshBtn');\\n  const showAllBtn = document.getElementById('showAllBtn');\\n  const clearIframeBtn = document.getElementById('clearIframe');\\n  const openInNewBtn = document.getElementById('openInNew');\\n  const lastPayloadArea = document.getElementById('lastPayload');\\n  const copyLastBtn = document.getElementById('copyLast');\\n\\n  let payloads = [];\\n  let filtered = [];\\n  let lastExecuted = '';\\n\\n  async function init(){\\n    payloadListEl.innerHTML = 'Loading payloads.json...';\\n    const p = await loadPayloads();\\n    if(!p){\\n      payloadListEl.innerHTML = '<div style=\\\"color:#900; padding:12px;\\\">Failed to load <code>payloads.json</code>. Place the file into this folder and reload the page.</div>';\n      return;\\n    }\\n    payloads = p;\\n    filtered = payloads.slice();\\n    renderList(filtered);\\n  }\\n\\n  function renderList(list){\\n    if(!list || list.length === 0){\\n      payloadListEl.innerHTML = '<div style=\\\"padding:12px;color:#555\\\">No payloads matched.</div>';\\n      return;\\n    }\\n    const frag = document.createDocumentFragment();\\n    list.forEach((pl, idx) => {\\n      const row = document.createElement('div');\\n      row.className = 'payload-row';\\n      const pre = document.createElement('div');\\n      pre.className = 'payload-text';\\n      pre.innerHTML = escapeHtml(pl);\\n      const controls = document.createElement('div');\\n      controls.style.display = 'flex';\\n      controls.style.flexDirection = 'column';\\n      controls.style.gap = '6px';\\n      const copyBtn = document.createElement('button');\\n      copyBtn.className = 'btn';\\n      copyBtn.textContent = 'Copy';\\n      copyBtn.onclick = () => { navigator.clipboard.writeText(pl).then(()=>{ copyBtn.textContent='Copied'; setTimeout(()=>copyBtn.textContent='Copy',900); }); };\n      const runBtn = document.createElement('button');\\n      runBtn.className = 'btn btn-primary';\\n      runBtn.textContent = 'Run';\\n      runBtn.onclick = async () => {\\n        const confirmRun = confirm('Execute this payload inside a sandboxed iframe? You confirmed authorization and must run in an isolated environment. Proceed?');\\n        if(!confirmRun) return;\\n        runPayloadInSandbox(pl);\\n        lastPayloadArea.value = pl;\\n        lastExecuted = pl;\\n      };\n      const viewBtn = document.createElement('button');\\n      viewBtn.className = 'btn';\\n      viewBtn.textContent = 'View raw';\\n      viewBtn.onclick = () => { window.open().document.write('<pre>'+escapeHtml(pl)+'</pre>'); };\n      controls.appendChild(copyBtn);\\n      controls.appendChild(runBtn);\\n      controls.appendChild(viewBtn);\\n      row.appendChild(pre);\\n      row.appendChild(controls);\\n      frag.appendChild(row);\\n    });\\n    payloadListEl.innerHTML = '';\\n    payloadListEl.appendChild(frag);\\n  }\\n\\n  function runPayloadInSandbox(payload){\\n    const iframe = document.getElementById('sandbox');\\n    // Build a safe HTML that sets a strict CSP and uses sandbox without allow-same-origin\\n    const safeDoc = `<!doctype html><meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none'; script-src 'unsafe-inline' 'unsafe-eval'; connect-src 'none'; img-src 'none'; style-src 'unsafe-inline';\\\"><div><pre>${escapeHtml(payload)}</pre></div><script>try{ /* payload runs here if it contains script tags */ }catch(e){console.error(e);}<\/script>`;\n    // Blob + URL approach to avoid network and origin exposure\n    const blob = new Blob([safeDoc], {type:'text/html'});\n    const url = URL.createObjectURL(blob);\n    iframe.src = url;\\n  }\\n\\n  // Wire controls\\n  refreshBtn.onclick = init;\\n  showAllBtn.onclick = () => { filtered = payloads.slice(); renderList(filtered); searchBox.value = ''; };\\n  searchBox.oninput = () => { const q = searchBox.value.toLowerCase(); filtered = payloads.filter(p=>p.toLowerCase().includes(q)); renderList(filtered); };\n  clearIframeBtn.onclick = () => { const iframe = document.getElementById('sandbox'); iframe.src = 'about:blank'; lastPayloadArea.value = ''; lastExecuted = ''; };\n  openInNewBtn.onclick = () => { if(!lastExecuted){ alert('No payload executed yet.'); return;} const w = window.open(); w.document.write('<pre>'+escapeHtml(lastExecuted)+'</pre>'); };\n  copyLastBtn.onclick = () => { if(!lastExecuted){ alert('No payload executed yet.'); return;} navigator.clipboard.writeText(lastExecuted); };\n\n  // init on load\\n  await init();\\n})();\\n</script>\\n</body>\\n</html>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
